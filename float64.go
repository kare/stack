// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// Float64 is a stack data structure.
type Float64 []float64

// NewFloat64 creates an empty float64 stack.
func NewFloat64() *Float64 {
	return &Float64{}
}

// Push a value to the stack.
func (s *Float64) Push(value float64) {
	(*s) = append([]float64{value}, (*s)...)
}

// Pop removes the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Float64) Pop() (float64, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value, nil
}

// Slice returns the stack contents as a slice of float64's.
func (s *Float64) Slice() []float64 {
	return []float64(*s)
}

// Peek returns the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Float64) Peek() (float64, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	return (*s)[0], nil
}

// IsEmpty returns true if the stack is empty.
func (s *Float64) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *Float64) Len() int {
	return len(*s)
}
