// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// Uint32Stack is a stack data structure.
type Uint32Stack []uint32

// NewUint32 creates an empty uint32 stack.
func NewUint32() *Uint32Stack {
	return &Uint32Stack{}
}

// Push a value to the stack.
func (s *Uint32Stack) Push(value uint32) {
	(*s) = append([]uint32{value}, (*s)...)
}

// Pop removes the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Uint32Stack) Pop() (uint32, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value, nil
}

// Slice returns the stack contents as a slice of uint32's.
func (s *Uint32Stack) Slice() []uint32 {
	return []uint32(*s)
}

// Peek returns the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Uint32Stack) Peek() (uint32, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	return (*s)[0], nil
}

// IsEmpty returns true if the stack is empty.
func (s *Uint32Stack) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *Uint32Stack) Len() int {
	return len(*s)
}
