// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// ByteStack is a stack data structure.
type ByteStack []byte

// NewByte creates an empty byte stack.
func NewByte() *ByteStack {
	return &ByteStack{}
}

// Push a value to the stack.
func (s *ByteStack) Push(value byte) {
	(*s) = append([]byte{value}, (*s)...)
}

// Pop removes the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *ByteStack) Pop() (byte, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value, nil
}

// Slice returns the stack contents as a slice of byte's.
func (s *ByteStack) Slice() []byte {
	return []byte(*s)
}

// Peek returns the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *ByteStack) Peek() (byte, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	return (*s)[0], nil
}

// IsEmpty returns true if the stack is empty.
func (s *ByteStack) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *ByteStack) Len() int {
	return len(*s)
}
