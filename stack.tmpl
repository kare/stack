// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// {{.TypeName}} is a stack data structure.
type {{.TypeName}} []{{.Type}}

// New{{.TypeName}} creates an empty {{.Type}} stack.
func New{{.TypeName}}() *{{.TypeName}} {
	return &{{.TypeName}}{}
}

// Push a value to the stack.
func (s *{{.TypeName}}) Push(value {{.Type}}) {
	(*s) = append([]{{.Type}}{value}, (*s)...)
}

// Pop removes the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *{{.TypeName}}) Pop() ({{.Type}}, error) {
	if len(*s) == 0 {
		return {{.TypeZeroValue}}, ErrEmptyStack
	}
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value, nil
}

// Slice returns the stack contents as a slice of {{.Type}}'s.
func (s *{{.TypeName}}) Slice() []{{.Type}} {
	return []{{.Type}}(*s)
}

// Peek returns the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *{{.TypeName}}) Peek() ({{.Type}}, error) {
	if len(*s) == 0 {
		return {{.TypeZeroValue}}, ErrEmptyStack
	}
	return (*s)[0], nil
}

// IsEmpty returns true if the stack is empty.
func (s *{{.TypeName}}) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *{{.TypeName}}) Len() int {
	return len(*s)
}
