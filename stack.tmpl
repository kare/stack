// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// {{.TypeName}} is a stack data structure.
type {{.TypeName}} []{{.Type}}

// New{{.ShortTypeName}} creates an empty {{.Type}} stack.
func New{{.ShortTypeName}}() *{{.TypeName}} {
	return &{{.TypeName}}{}
}

// Push a value to stack
func (s *{{.TypeName}}) Push(value {{.Type}}) {
	(*s) = append([]{{.Type}}{value}, (*s)...)
}

// Pop removes the most recently added item
func (s *{{.TypeName}}) Pop() {{.Type}} {
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value
}

// Slice returns the stack contents as an {{.Type}} slice.
func (s *{{.TypeName}}) Slice() []{{.Type}} {
	return []{{.Type}}(*s)
}

// Peek returns the most recently added item.
func (s *{{.TypeName}}) Peek() {{.Type}} {
	return (*s)[0]
}

// IsEmpty returns true if the stack is empty.
func (s *{{.TypeName}}) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *{{.TypeName}}) Len() int {
	return len(*s)
}
