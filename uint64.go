// Code generated by "gends"; DO NOT EDIT.

package stack // import "kkn.fi/stack"

// Uint64 is a stack data structure.
type Uint64 []uint64

// NewUint64 creates an empty uint64 stack.
func NewUint64() *Uint64 {
	return &Uint64{}
}

// Push a value to the stack.
func (s *Uint64) Push(value uint64) {
	(*s) = append([]uint64{value}, (*s)...)
}

// Pop removes the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Uint64) Pop() (uint64, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	value := (*s)[0]
	(*s) = (*s)[1:]
	return value, nil
}

// Slice returns the stack contents as a slice of uint64's.
func (s *Uint64) Slice() []uint64 {
	return []uint64(*s)
}

// Peek returns the most recently added item.
// If called on an empty stack will return ErrEmptyStack error.
func (s *Uint64) Peek() (uint64, error) {
	if len(*s) == 0 {
		return 0, ErrEmptyStack
	}
	return (*s)[0], nil
}

// IsEmpty returns true if the stack is empty.
func (s *Uint64) IsEmpty() bool {
	return len(*s) == 0
}

// Len returns the number of items in the stack.
func (s *Uint64) Len() int {
	return len(*s)
}
